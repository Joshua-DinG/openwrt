#
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#

name: OpenWRT-X86  #设备名请用大写字母

on:
  #schedule:
    #- cron: 0 22 */2 * *

  workflow_dispatch:

env:
  DEVICE_NAME: X86  #设备名请用大写字母
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  CORE_VER: https://raw.githubusercontent.com/vernesong/OpenClash/core/dev/core_version
  CORE_TUN: https://github.com/vernesong/OpenClash/raw/core/dev/premium/clash-linux-amd64
  CORE_DEV: https://github.com/vernesong/OpenClash/raw/core/dev/dev/clash-linux-amd64.tar.gz
  CORE_MATE: https://github.com/vernesong/OpenClash/raw/core/dev/meta/clash-linux-amd64.tar.gz

permissions: write-all

jobs:
  build_openwrt:
    name: Build Firmware
    runs-on: ubuntu-latest
    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* moby* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWRT
        uses: actions/checkout@v3

      - name: Clone LEDE Code
        run: |
          git clone --depth=1 --single-branch https://github.com/coolsnowwolf/lede.git

      - name: Update Plugins
        run: |
          cd ./lede/package

          #Design Theme
          git clone --depth=1 --single-branch https://github.com/gngpp/luci-theme-design.git

          #Design Config
          git clone --depth=1 --single-branch https://github.com/gngpp/luci-app-design-config.git

          #OpenClash
          git clone --depth=1 --single-branch --branch "dev" https://github.com/vernesong/OpenClash.git

          #OpenClash Core
          cd ./OpenClash/luci-app-openclash/root/etc/openclash
          mkdir ./core && cd ./core

          export TUN_VER=$(curl -s $CORE_VER | sed -n "2p")
          curl -SsL -o ./tun.gz $CORE_TUN-$TUN_VER.gz
          gzip -d ./tun.gz
          mv ./tun ./clash_tun

          curl -SsL -o ./meta.tar.gz $CORE_MATE
          tar -zxf ./meta.tar.gz
          mv ./clash ./clash_meta

          curl -SsL -o ./dev.tar.gz $CORE_DEV
          tar -zxf ./dev.tar.gz

          chmod +x ./clash*
          rm -rf ./*.gz

      - name: Update Feeds
        run: |
          cd ./lede

          #添加第三方插件源
          #echo "src-git small8 https://github.com/kenzok8/small-package" >> ./feeds.conf.default

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Update Settings
        run: |
          cd ./lede

          #默认主机名
          sed -i "s/OpenWrt/OpenWRT-$DEVICE_NAME/g" ./package/base-files/files/bin/config_generate
          #默认IP地址
          sed -i "s/192.168.1.1/192.168.2.1/g" ./package/base-files/files/bin/config_generate
          #默认主题
          sed -i "s/luci-theme-bootstrap/luci-theme-design/g" ./feeds/luci/collections/luci/Makefile
          #默认时间格式
          sed -i 's/os.date()/os.date("%Y-%m-%d %H:%M:%S %A")/g' $(find ./package/lean/autocore/files/ -type f -name "index.htm")

      - name: Custom Settings
        run: |
          cd ./lede

          rm -rf ./tmp && rm -rf ./.config*
          cat $GITHUB_WORKSPACE/config/X86.config > .config

          make defconfig

      - name: Download Packages
        run: |
          cd ./lede

          make download -j16

      - name: Compile Firmware
        run: |
          cd ./lede

          make -j$(nproc) || make -j1 V=s

          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./build_dir
          echo "======================="
          du -h --max-depth=1 ./bin
          echo "======================="

      - name: Package Firmware
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV

          cd ./lede
          cp -rf $(find ./bin/targets/ -type f -iname "*$DEVICE_NAME*.*") ./bin/targets/
          cp -rf ./.config ./bin/targets/config.txt

          cd ./bin/targets
          zip -pmq "$DEVICE_NAME"_Firmware_"$BUILD_DATE".zip *.*

      - name: Release Firmware
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{env.DEVICE_NAME}}_Firmware_${{env.BUILD_DATE}}
          files: ./lede/bin/targets/*.zip
          body: |
            不要问，更就完事了！
            地址：192.168.2.1
            密码：password

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3
